@startuml System Sequence Diagram - Exception Handling & Recovery

!theme plain
skinparam sequenceMessageAlign center
skinparam sequenceArrowThickness 1
skinparam roundcorner 10
skinparam maxmessagesize 40

' Optimized for 4096px limit
skinparam dpi 72
skinparam scale 0.4
skinparam participantFontSize 8
skinparam participantFontStyle normal
skinparam participantBackgroundColor #E3F2FD
skinparam participantBorderColor #1976D2
skinparam participantBorderThickness 1
skinparam messageFontSize 7
skinparam messageFontStyle normal
skinparam messageColor #333333
skinparam noteBackgroundColor #FFF3CD
skinparam noteBorderColor #856404
skinparam noteBorderThickness 1
skinparam actorBackgroundColor #FFEBEE
skinparam actorBorderColor #D32F2F
skinparam actorBorderThickness 1

actor "Customer" as Customer
participant "Browser" as Browser
participant "Flask App" as Flask
participant "Quality Manager" as QTM
participant "Circuit Breaker" as CB
participant "Retry Manager" as Retry
participant "Queue Manager" as Queue
participant "Database" as DB

Customer -> Browser: Submit invalid card
Browser -> Flask: POST /process_payment

note over Flask: Circuit Breaker Pattern
Flask -> QTM: execute_with_circuit_breaker(payment_func)
QTM -> CB: execute(payment_func)
CB -> DB: query CircuitBreakerState
DB --> CB: circuit state = "closed"
CB -> CB: process_payment()
CB --> QTM: Card Declined Error
QTM --> Flask: payment failed

note over Flask: Retry Logic
Flask -> QTM: execute_with_retry(payment_func, max_attempts=3)
QTM -> Retry: execute(retry_func)

loop Retry Attempts (1 to 3)
    Retry -> Retry: process_payment()
    Retry --> Retry: Card Declined Error
    Retry -> DB: log retry attempt
    DB --> Retry: attempt logged
    
    alt Attempt < 3
        Retry -> Retry: wait(retry_delay)
    else Attempt = 3
        Retry --> QTM: all retries exhausted
    end
end

QTM --> Flask: retry failed after 3 attempts

note over Flask: Graceful Degradation
Flask -> QTM: queue_order_for_retry(order_data, user_id)
QTM -> Queue: execute(order_data, user_id)
Queue -> DB: INSERT INTO OrderQueue
DB --> Queue: order queued
Queue --> QTM: order queued for retry
QTM --> Flask: order queued successfully

Flask --> Browser: JSON {success: false, error: "Card declined", suggestions: ["Try different card", "Use cash"]}
Browser --> Customer: Display error with recovery options

note over Customer: Customer chooses alternative
Customer -> Browser: Select "Try Cash Payment"
Browser -> Flask: POST /process_payment {payment_type: "cash"}

Flask -> QTM: execute_with_circuit_breaker(cash_payment_func)
QTM -> CB: execute(cash_payment_func)
CB -> CB: process_cash_payment()
CB --> QTM: Cash payment successful
CB -> DB: update CircuitBreakerState (reset failure_count)
CB --> QTM: cash payment successful
QTM --> Flask: payment processed successfully

Flask --> Browser: JSON {success: true, sale_id: 124}
Browser --> Customer: Display success message

@enduml
